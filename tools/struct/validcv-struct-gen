# AYESEC:POST_SHS('18 lines')=9da1fc9afc1b85e1e81e78a53f97d4436d886182eec170ddd6c78ec71e64113d9ade4fd1bf969ed5bbe62baed9a575d2b5e3ccdc0383c27eb7a4b6bc71965afe
# AYESEC:STATUTORY_HEADER
if [ "${ayevdi_sourcefrom}" != "${HOME}/.ayevdi/ayevdi-sourcefrom" ]
then
  echo "AyeVDI by https://ayeai.xyz"
  echo "Copyright (C) 2019-2020 Abhishek Choudhary, Dr Srija Katta"
  echo ""
  echo "NO WARRANTY, and ZERO LIABILITY (Limited to INR 1/- only)"
  echo "Further usage of these software, artifacts or methods"
  echo "are subject to the 'latest' license agreement avaialble at"
  echo "https://raw.githubusercontent.com/ayeai/spl/master/LICENSE"
  echo ""
  echo "AyeVDI not activated. Please use the following command to"
  echo "activate AyeVDI"
  echo '  ayesh=$(tempfile) && wget https://bit.ly/ayevdi-sfrom-init -O${ayesh} -q && . ${ayesh}'
  echo ""
  exit
fi
# AYESEC:STATUTORY_HEADER_COMPLETED
# AYESEC:PREV_SHS('18 lines')=9da1fc9afc1b85e1e81e78a53f97d4436d886182eec170ddd6c78ec71e64113d9ade4fd1bf969ed5bbe62baed9a575d2b5e3ccdc0383c27eb7a4b6bc71965afe

# TODO: Refactor variable names to more meaningful ones
# TODO: Major refactor - extract and harden variables as per a well defined schema across all of AyeVDI and derivatives

export ver=${vcvverqual}
echo "# Auto-generated code @$(date +%s)"
echo "# Legal Notice: Distribution in any form PROHIBITED. Do NOT distribute. DELETE THIS FILE"
echo "# Contact original source data copyright holders to obtain right to distribute"
echo "# Where there is ambiguity to the copyright holder, presume distribution is explicitly barred or disallowed"
echo "# Disclaimer: The content of the script pertains to copyrighted material from 3rd party sources"
echo "# Delete this script and do not use it further if you do not agree with the notices herein"
echo "# Use it is at your own risk. NO WARRANTY, and ZERO LIABILITY (Limited to INR 1/- only)"
echo "# By using this file or script you explicitly agree to indemnify the original authors,"
echo "# against any losses to yourself or any 3rd party."
echo "# Each of the clauses of the legal notices appearing here are to be treated independently, and"
echo "# repungency or inapplicability of a clause does not invalidate others"
wget -O- -q https://bit.ly/validcv-struct-gen | head -20
# TODO: Capture auto generated code notices into an OST

echo ""
echo "if [ ! -e ${ver}/validcv-source-${2}-${3} ]"
echo "then"
echo "  mkdir -p ${ver}"
echo "  wget -q https://bit.ly/validcv-source-${2}-${3} -O${ver}/validcv-source-${2}-${3}"
echo "fi"

# The following portion is the filter
tail +2 |\
tr ' ' '_' |\
sed 's/"//g' |\
awk -F',' -vcode=${ver} -vst=${2} -vcc=${3} 'function cp_info(code,based,st,cc) {
    print "# Copyright information from source"
    print "echo \"#### See the following URLs for content copyright information\" >>" code "/README.md;"
    print "echo \"\\`\\`\\`\" >>" code "/README.md;"
    print "cat " based "/validcv-source-" st "-" cc " >>" code "/README.md;"
    print "echo \"\\`\\`\\`\" >>" code "/README.md;"
  }
  BEGIN { lc=0;
          plc=0;
          based=code;
        };
  /.*/ { if(NF>1) {
           if(pc != code || plc!=lc) {
             cp_info(code,based,st,cc);
           }
           pc=code;
           plc=lc;
           lc=length($1);
           if(NF==2) {
             code=$1;
             desc=$2;
           }
           else {
             code=$2;
             desc=$3;
           }
           print "\n# header record=" NR " fields=" NF " len=" lc " code=" code " prev_len=" plc " prev_code=" pc;
           if(plc<lc) {
             print "pushd " pc "; ";
           }
           if(plc>lc) {
             print "for n in {1.." plc-lc "}; do popd; done; ";
           }
           print "mkdir -p " code ";"
           mdh1="~ " code " ";
         }
         else {
           print "## body record=" NR " fields=" NF " len=" lc " code=" code " prev_len=" plc " prev_code=" pc;
           desc=$1
           mdh1=""
         }
         print "echo \"" mdh1 desc "\" | tr \"_#~\" \" ,#\" >>" code "/README.md;"
       };
  END { cp_info(code,based,st,cc);
        print "for n in {1.." lc "}; do popd; done; "
      }'
  
# TODO: Check for errors
# TODO: Improve coding structure
# TODO: Remove awk script into separate file

# TODO: Identify nuances across coding paradigms such as awk 'space between fxname and ('
# Note: These nuances make understanding code difficult and more importantly prevent multi-paradigm coding

# TODO: Needs legal review for providing external links
# TODO: Figure out a way to allow Extreme Literate Programming(TM) within the legal framework of AyeAI SPL
# Notice: Providing an external link does imply endorsement
# Warning: This is not an invitation to purchase any products. Users / readers may do so at their own risk

# TODO: Capture coding notes into coding quidelines across AyeAI projects
# Note (coding): There appears to be a quirk in GNU Awk v4.1.4 as available in Ubuntu 18.04 LTS as on 6-Feb-2020
# Set two strings to any length of 0 (zeros) and they will compare equal! Expected behaviour?
# Try:
#   awk '{code=$1; pc=$2; printf code; if(pc!=code) {printf " NE "} else {printf " EQ "}; print pc}'
# Test inputs:
# 0 00
# 00 000
# 00 0
# "0" "00"
# The explicitly quoted strings work, the quotes are part of the string!
# TODO: Check the above behaviour in other untyped languages
# JS appears to deal with this diffently, at least in Chrome
# Try:
#   <html><body>
#     <p id="result"></p>
#     <script>
#       var code = "0";
#       var pc = "00";
#       document.getElementById("result").innerHTML = code + ((pc != code)?" NE ":" EQ ") + pc
#     </script>
#   </body></html>

# Ref:
# Comparision of programming paradigms - as of the following record the article is pretty informative
# http://web.archive.org/web/20190619230236/https://en.wikipedia.org/wiki/Comparison_of_programming_paradigms
# A nice compendium on Awk
# https://web.archive.org/web/20180623082305/https://www.thegeekstuff.com/2010/01/8-powerful-awk-built-in-variables-fs-ofs-rs-ors-nr-nf-filename-fnr/
  
